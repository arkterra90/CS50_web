Lecture:
SQL, Models, and Migrations

Django allows us to have an abstraction layer to interact with SQL.
Data:
    Storing data in a relational database allows us to interact with data in our application.
    SQL allows us to have a database languege to manage relational databases.
    MySQL & PostgeSQL are for big data management
    SQLite is more for servers and liter weight implementation that MySQL, stores all data in a single file.
        Many of the same syntax for SQLite applies to other SQL 
    SQL
        Has Data types like all programing languages.
            SQLite - Text, numeric, integer(ints & NUMBERS WITH DECIMAL POINTS), real(), 
                BLOB(binary large object, audio files and images.)
            MySQL - has a longer list of storeable data types that can add some efficiencys
                CHARSET, VARCHAR, SMALLINT, INT, BIGINT, FLOAT, DOUBLE
    Creating a table:
        CREATE TABLE flights (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            origin TEXT NOT NULL,
            destination TEXT NOT NULL,
            duration INTEGER NOT NULL
        );
        each lower case item is a column title,
        the upper case is the type of data being stored.
        NOT NULL is an example of an additional constraint on the data.
            other constraints: CHECK, DEFAULT, PRIMARY KEY, UNIQUE
            allows you to ensure valid data is added to the table.
    INSERT into a SQL table
        INSERT INTO flights
            (origin, destination, duration)
            VALUES ("New York", "London", 415);
        Allows us to add new rows into our table
    SELECT and view data from a table
        SELECT * FROM flights;
            This would show us all data in flights.
             * is a wild card.
        SELECT origin, destination, FROM flights;
            This would only return the origin and destination column of the table
        SELECT * FROM flights WHERE id = 3;
            This would only return a row with the id of 3.
        SELECT * FROM flights WHERE origin LIKE "%a%";
            returns all results with an a in the origin column
        Addtional functions of queries
            AVERAGE, COUNT, MAC, MIN, SUM
    UPDATE command
        UPDATE flights SET duration = 430 WHERE origin = "New York" AND destination = "London";
            updates duration WHERE next conditions are true.
    DELETE command 
        DELETE FROM flights WHERE destination = "Tokyo";
            deletes where the condition is true
    Other Clauses
        LIMIT, ORDER BY, GROUP BY, HAVING
    Foreign Keys
        When we have repitition we want to seperate out data and "normalize" it.
        We might have a seperate table for this data to keep repitition down
        An association table joins values from two tables to express relationships
    Join queries
        SELECT first, origine, destination FROM flights JOIN passengers ON passengers.flight_id = flights.id;
        JOIN/ INNER JOIN, LEFT OUTER JOIN, RIGHT OUTER JOIN, FULL OUTER JOIN
    TALBE OPTIMIZATIONS
        CREATE INDEX name_index ON passengers (last);
        allows us to more efficiently search a table
    SQL injection
        Using strategys to keep people from hacking our queries
    Race conditions
        Any time you have multipul things happening at the same time
        Could result in conflicts and unexpected results
        We could place a lock on the database any time a transaction is being done.
    sqlite3 Modes 
        .mode columns
        .headers yes
            These give formating to the output of sqlite3
Django Models
    Every table has to be a class inside of the apps models.py file
    In order to update the table to let it know there is a database a migration must happen 
    Two step process
        Instruction and then application
        python3 manage.py makemigrations
        python3 manage.py migrate
    We can interact with data inside of the django shell
        python3 manage.py shell
        Inserting data in the shell 
            Import your new model into the shell with:
                from flights.model import Flight
                from flights.models import *
            f = Flight(origin="New York", destination="London", duration=415)
            f.save()
        Query for the flight
            Flight.objects.all()
            flight = flights.first()
        Going into the models.py file we can use __str__ function to return a string of the file
        Delete with flight.delete()
        Airports.objects.filter(city="New York")
    Foreign Keys and multi tables in Django 
        models.ForeignKey(Airtport, on_delete=models.CASCADE)
            This ties one table to another and when deleted in one table will also delete in another.
    Django admin    
        python3 manage.py createsuperuser
        